basePath: /api/v1
definitions:
  horse.BaseResponse:
    description: This is a horse model
    properties:
      distance:
        example: 50
        type: integer
        x-order: "3"
      level:
        example: 100
        type: integer
        x-order: "2"
      speed:
        example: 2000
        type: integer
        x-order: "4"
      user_id:
        example: 1
        type: integer
        x-order: "1"
    type: object
  horse.GameRequest:
    properties:
      distance:
        type: integer
        x-order: "1"
    type: object
  horse.GameResponse:
    properties:
      distance:
        type: integer
        x-order: "3"
      earned:
        type: integer
        x-order: "1"
      record:
        type: boolean
        x-order: "2"
    type: object
  money.BaseResponse:
    description: This is a money model
    properties:
      gold:
        example: 100
        type: integer
        x-order: "2"
      silver:
        example: 50
        type: integer
        x-order: "3"
      user_id:
        example: 1
        type: integer
        x-order: "1"
    type: object
  user.BaseRequest:
    properties:
      first_name:
        type: string
        x-order: "2"
      hash:
        type: string
        x-order: "4"
      id:
        example: 1
        type: integer
        x-order: "1"
      last_name:
        type: string
        x-order: "3"
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for WildWest.
  title: WildWest API
  version: "1.0"
paths:
  /auth/telegram:
    post:
      consumes:
      - application/json
      description: Authenticates a user by verifying the Telegram Web App data and
        issues a JWT if successful.
      parameters:
      - description: User data required for authentication.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token issued successfully.
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - invalid request body.
          schema:
            type: string
        "401":
          description: Unauthorized - invalid data signature.
          schema:
            type: string
        "500":
          description: Internal server error - failed to create or update user, or
            token generation failed.
          schema:
            type: string
      summary: Authenticate user via Telegram
      tags:
      - user
  /gunfight/find:
    get:
      consumes:
      - application/json
      description: Opens a websocket connection and waits to match with an opponent
        for a gunfight.
      parameters:
      - description: User ID
        in: header
        name: user-id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: WebSocket connection established, waiting for opponent.
          schema:
            type: string
        "400":
          description: Could not open websocket connection
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Initiate gunfight search
      tags:
      - gunfight
  /horse/{user_id}:
    get:
      consumes:
      - application/json
      description: Fetches the horse's data and calculates its speed based on the
        user ID provided in the path.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the horse along with its calculated speed.
          schema:
            $ref: '#/definitions/horse.BaseResponse'
        "400":
          description: Bad request - user_id is required or invalid.
          schema:
            type: string
        "404":
          description: Not found - no horse found for the user ID.
          schema:
            type: string
      summary: Retrieve horse by user ID
      tags:
      - horse
  /horse/finish/{user_id}:
    post:
      consumes:
      - application/json
      description: Completes the race for the horse and updates its record and earnings
        according to the distance covered, as specified in the request body.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Race completion details including the distance covered.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/horse.GameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the results of the race finish with updated horse data
            and earnings.
          schema:
            $ref: '#/definitions/horse.GameResponse'
        "400":
          description: Bad request - user_id is required or invalid, or the request
            body is malformed.
          schema:
            type: string
        "404":
          description: Not found - no horse found to finish race for the user ID.
          schema:
            type: string
        "500":
          description: Internal server error - error during the race finish process.
          schema:
            type: string
      summary: Finish horse race
      tags:
      - horse
  /horse/upgrade/{user_id}:
    get:
      consumes:
      - application/json
      description: Increases the horse's level for the user ID provided in the path.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Horse upgraded successfully with new level information.
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - user_id is required or invalid.
          schema:
            type: string
        "404":
          description: Not found - no horse found to upgrade for the user ID.
          schema:
            type: string
        "500":
          description: Internal server error - error during the upgrade process.
          schema:
            type: string
      summary: Upgrade horse level
      tags:
      - horse
  /money/{user_id}:
    get:
      consumes:
      - application/json
      description: Fetches the money details associated with the provided user ID.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the money details for the specified user ID.
          schema:
            $ref: '#/definitions/money.BaseResponse'
        "400":
          description: Bad request - user_id is required or invalid.
          schema:
            type: string
        "404":
          description: Not found - no money record found for the user ID.
          schema:
            type: string
      summary: Retrieve money record
      tags:
      - money
swagger: "2.0"
