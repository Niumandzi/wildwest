// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/telegram": {
            "post": {
                "description": "Authenticates a user by verifying the Telegram Web App data and issues a JWT if successful.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Authenticate user via Telegram",
                "parameters": [
                    {
                        "description": "User data required for authentication.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token issued successfully.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid request body.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid data signature.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error - failed to create or update user, or token generation failed.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/gunfight/find": {
            "get": {
                "description": "Opens a websocket connection and waits to match with an opponent for a gunfight.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gunfight"
                ],
                "summary": "Initiate gunfight search",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user-id",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "WebSocket connection established, waiting for opponent.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Could not open websocket connection",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/horse/finish/{user_id}": {
            "post": {
                "description": "Completes the race for the horse and updates its record and earnings according to the distance covered, as specified in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "horse"
                ],
                "summary": "Finish horse race",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Race completion details including the distance covered.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/horse.GameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the results of the race finish with updated horse data and earnings.",
                        "schema": {
                            "$ref": "#/definitions/horse.GameResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - user_id is required or invalid, or the request body is malformed.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found - no horse found to finish race for the user ID.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error - error during the race finish process.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/horse/upgrade/{user_id}": {
            "get": {
                "description": "Increases the horse's level for the user ID provided in the path.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "horse"
                ],
                "summary": "Upgrade horse level",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Horse upgraded successfully with new level information.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - user_id is required or invalid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found - no horse found to upgrade for the user ID.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error - error during the upgrade process.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/horse/{user_id}": {
            "get": {
                "description": "Fetches the horse's data and calculates its speed based on the user ID provided in the path.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "horse"
                ],
                "summary": "Retrieve horse by user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the horse along with its calculated speed.",
                        "schema": {
                            "$ref": "#/definitions/horse.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - user_id is required or invalid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found - no horse found for the user ID.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/money/{user_id}": {
            "get": {
                "description": "Fetches the money details associated with the provided user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "money"
                ],
                "summary": "Retrieve money record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the money details for the specified user ID.",
                        "schema": {
                            "$ref": "#/definitions/money.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - user_id is required or invalid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found - no money record found for the user ID.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "horse.BaseResponse": {
            "description": "This is a horse model",
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer",
                    "x-order": "1",
                    "example": 1
                },
                "level": {
                    "type": "integer",
                    "x-order": "2",
                    "example": 100
                },
                "distance": {
                    "type": "integer",
                    "x-order": "3",
                    "example": 50
                },
                "speed": {
                    "type": "integer",
                    "x-order": "4",
                    "example": 2000
                }
            }
        },
        "horse.GameRequest": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "integer",
                    "x-order": "1"
                }
            }
        },
        "horse.GameResponse": {
            "type": "object",
            "properties": {
                "earned": {
                    "type": "integer",
                    "x-order": "1"
                },
                "record": {
                    "type": "boolean",
                    "x-order": "2"
                },
                "distance": {
                    "type": "integer",
                    "x-order": "3"
                }
            }
        },
        "money.BaseResponse": {
            "description": "This is a money model",
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer",
                    "x-order": "1",
                    "example": 1
                },
                "gold": {
                    "type": "integer",
                    "x-order": "2",
                    "example": 100
                },
                "silver": {
                    "type": "integer",
                    "x-order": "3",
                    "example": 50
                }
            }
        },
        "user.BaseRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "1",
                    "example": 1
                },
                "first_name": {
                    "type": "string",
                    "x-order": "2"
                },
                "last_name": {
                    "type": "string",
                    "x-order": "3"
                },
                "hash": {
                    "type": "string",
                    "x-order": "4"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "WildWest API",
	Description:      "This is a sample server for WildWest.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
